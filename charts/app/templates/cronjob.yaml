{{- if .Values.cronjob.enabled -}}
  {{- $root := . -}}
  {{- $appname := printf "%s" (include "name" .) -}}
  {{- $cronJobName :=  printf "%s-%s" (include "name" .) "cron" -}}
  {{- range $key, $value := .Values.cronjob.spec }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  namespace: "{{ $root.Release.Namespace }}"
  labels:
    helm.sh/chart: "{{ $root.Chart.Name }}-{{ $root.Chart.Version }}"
    cronjob: "{{ $cronJobName }}"
    chart: "{{ $root.Chart.Name }}-{{ $root.Chart.Version }}"
    release: "{{ $root.Release.Name }}"
  name: "{{ $cronJobName }}-{{ $key }}"
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 10
  jobTemplate:
    metadata:
      name: "{{ $cronJobName }}-{{ $key }}"
      labels:
        helm.sh/chart: "{{$root.Chart.Name}}-{{$root.Chart.Version}}"
        cronjob: "{{ $cronJobName }}"
    spec:
      template:
        spec:
        {{- if $.Values.serviceAccountName }}
          serviceAccountName: {{ $.Values.serviceAccountName}}
        {{- else if $.Values.rbac.create }}
          serviceAccountName: {{ $.Release.Namespace }}-{{ $appname }}
        {{- end }}
          volumes:
        {{- if $.Values.secrets }}
            - name: secrets-store-inline
              csi:
                driver: secrets-store.csi.k8s.io
                readOnly: true
                volumeAttributes:
                  secretProviderClass: {{ $appname }}-aws-secrets
        {{- end }}
        {{- if $.Values.secretsExternal }}
            - name: {{ $appname }}-external-secrets-ssm
              secret:
                secretName: {{ $appname }}-external-secrets-ssm
        {{- end }}
          containers:
          - name: "{{ $key }}"
            command:
            {{- range $value.command}}
            - {{ . }}
            {{- end }}
            args:
            {{- range $value.args}}
            - {{ . }}
            {{- end }}
            {{- if $root.Values.configmap }}
            envFrom:
            - configMapRef:
                name: "{{ $appname }}"
            {{- end }}
            env:
            - name: BUILD_ID
              value: {{ $root.Values.buildId | default "000" | quote }}
            - name: SENTRY_ENVIRONMENT
              value: {{ $root.Values.environment | quote }}
            - name: SENTRY_RELEASE
              value: {{ $root.Values.image.tag | quote }}
            {{- if $root.Values.tracingEnabled }}
            - name: JAEGER_AGENT_BINARY_PORT
              value: "6832"
            - name: JAEGER_AGENT_COMPACT_PORT
              value: "6831"
            - name: JAEGER_AGENT_SAMPLING_PORT
              value: "5778"
            - name: JAEGER_AGENT_ZIPKIN_THRIFT_PORT
              value: "5775"
            - name: JAEGER_AGENT_HOST
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            {{- end }}
            {{- if $root.Values.secrets }}
            {{- range $key, $value := $root.Values.secrets }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  key: "{{ $key }}"
                  name: "{{ $appname }}"
            {{- end }}
            {{- end }}
            {{- if $root.Values.secretsExternal }}
            {{- range $key, $value := $root.Values.secretsExternal }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  key: {{ $key }}
                  name: {{ $appname }}-external-secrets-ssm
            {{- end }}
            {{- end }}            
        {{- if $.Values.secrets }}
            volumeMounts:
              - name: secrets-store-inline
                mountPath: "/mnt/secrets-store"
        {{- end }}
        {{- if $root.Values.secretsExternal }}  
            volumeMounts:
              - name: {{ $appname }}-external-secrets-ssm
                readOnly: true
                mountPath: "/mnt/external-secrets-ssm"            
        {{- end }}         
            image: "{{ $root.Values.image.repository }}:{{ $root.Values.image.tag }}"
            imagePullPolicy: Always
        {{- if $root.Values.nodeSelector }}
          nodeSelector:
          {{ toYaml $root.Values.nodeSelector | indent 8 }}
        {{- end }}
          restartPolicy: Never
          terminationGracePeriodSeconds: 30
  schedule: {{ default "1 * * * *" $value.schedule | quote }}
  startingDeadlineSeconds: 300
  successfulJobsHistoryLimit: 3
  suspend: false
  {{- end -}}
{{- end -}}
