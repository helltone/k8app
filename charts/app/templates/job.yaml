{{- if .Values.job.enabled -}}
  {{- $appname := printf "%s" (include "name" .) -}}
  {{- $jobName :=  printf "%s-%s" (include "name" .) "job" -}}
  {{- $uniqueSecrets := include "uniqueSecrets" . | fromJson -}}
  {{- range $key, $value := .Values.job.spec }}
---
apiVersion: batch/v1
kind: Job
metadata:
  namespace: "{{ $.Release.Namespace }}"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    helm.sh/chart: "{{$.Chart.Name}}-{{$.Chart.Version}}"
    job: "{{ $jobName }}"
    chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    release: "{{ $.Release.Name }}"
  name: "{{ $jobName }}-{{ $key }}"
spec:
  backoffLimit: {{ default 10 $value.backoffLimit }}
  completions: 1
  parallelism: 1
  template:
    metadata:
      name: "{{ $jobName }}-{{ $key }}"
      labels:
        helm.sh/chart: "{{$.Chart.Name}}-{{$.Chart.Version}}"
        job: "{{ $jobName }}"
    spec:
    {{- if $.Values.serviceAccountName }}
      serviceAccountName: {{ $.Values.serviceAccountName}}
    {{- else if $.Values.rbac.create }}
      serviceAccountName: {{ $.Release.Namespace }}-{{ $appname }}
    {{- end }}
    {{- if $.Values.secrets }}
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ $appname }}-aws-secrets
    {{- end }}
    {{- if $.Values.secretsExternal }}
      volumes:
        - name: {{ $appname }}-external-secrets-ssm
          secret:
            secretName: {{ $appname }}-external-secrets-ssm
    {{- end }}
    {{- if and $.Values.job.mountVolume $.Values.volume.enabled }}
      volumes:
        - name: {{ $appname }}-claim
          persistentVolumeClaim:
            readOnly: {{ $.Values.volume.mount.readOnly }}
            claimName: {{ $appname }}-claim
    {{- end }}

      containers:
      - name: "{{ $key }}"
        command:
        {{- range $value.command }}
        - {{ . }}
        {{- end }}
        args:
        {{- range $value.args }}
        - {{ . }}
        {{- end }}
        {{- if $.Values.configmap }}
        envFrom:
        - configMapRef:
            name: "{{ $appname }}"
        {{- end }}
        env:
        - name: BUILD_ID
          value: {{ default "000" $.Values.image.tag | quote  }}
        {{- if $.Values.secrets }}
          {{- range $envVar, $secretInfo := $uniqueSecrets }}
        - name: {{ $envVar }}
          valueFrom:
            secretKeyRef:
              name: {{ $appname }}
              key: {{ $secretInfo.key }}
          {{- end }}
        {{- end }}
        {{- if $.Values.secretsExternal }}
        {{- range $key, $value := $.Values.secretsExternal }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              key: {{ $key }}
              name: {{ $appname }}-external-secrets-ssm
        {{- end }}
        {{- end }}
    {{- if $.Values.secrets }}
        volumeMounts:
          - name: secrets-store-inline
            mountPath: "/mnt/secrets-store"
    {{- end }}
    {{- if $.Values.secretsExternal }}
        volumeMounts:
          - name: {{ $appname }}-external-secrets-ssm
            readOnly: true
            mountPath: "/mnt/external-secrets-ssm"
    {{- end }}
    {{- if and  $.Values.job.mountVolume $.Values.volume.enabled }}
        volumeMounts:
          - name: {{ $appname }}-claim
            mountPath: {{ $.Values.volume.mount.path }}
            readOnly: {{ $.Values.volume.mount.readOnly }}
    {{- end }}

        {{- if hasKey $value "image"  }}
        image: "{{ $value.image.repository }}:{{ $value.image.tag }}"
        {{- else }}
        image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
        {{- end }}
        imagePullPolicy: Always
    {{- if $.Values.nodeSelector }}
      nodeSelector:
{{ toYaml $.Values.nodeSelector | indent 8 }}
    {{- end }}
    {{- if $.Values.tolerations }}
      tolerations:
{{ toYaml $.Values.tolerations | indent 8 }}
    {{- end }}
      restartPolicy: OnFailure
  {{- end -}}
{{- end -}}